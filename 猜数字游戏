写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：
猜测数字中有多少位属于数字和确切位置都猜对了（称为 "Bulls"，公牛）
有多少位属于数字猜对了但是位置不对（称为 "Cows"，奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。
给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。
提示的格式为 "xAyB" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。
请注意秘密数字和朋友猜测的数字都可能含有重复数字。
//答案，最优解
class Solution {
public:
    string getHint(string secret, string guess) {
        int s[10]={0};
        int g[10]={0};//初始值设置为0
        int a=0,b=0;
        for(int i=0;i<secret.length();i++){
            if(secret[i]==guess[i])
                ++a;
            else{
                ++s[secret[i]-'0'];//利用数组下标来代表数字，出现一次，则在下标为这个数的位置上+1
                ++g[guess[i]-'0'];
            }
        }
        for(int i=0;i<10;i++){
            b+=min(s[i],g[i]);//取这个数出现的次数的最小值
        }
        string ans = to_string(a);
        ans+='A';
        ans.append(to_string(b));
        ans+="B";
        return ans;
    }
};

//个人-利用hashmap
class Solution {
public:
    string getHint(string secret, string guess) {
        vector<int>A,B;
        unordered_map<int,int> hmap_a,hmap_b;//hash_map定义方式
        int bull =0,cow=0;
        for(int i=0;i<secret.size();i++){
            A.push_back(secret[i]);
            B.push_back(guess[i]);

            if(A[i]==B[i])  bull++;
            else{
                hmap_a.insert({i,A[i]-'0'});
                hmap_b.insert({i,B[i]-'0'});
            }
        }
        unordered_map<int, int>::iterator iter_a = hmap_a.begin();//定义迭代器
        
        for(;iter_a!=hmap_a.end();iter_a++){
            for(unordered_map<int, int>::iterator iter_b = hmap_b.begin();iter_b!=hmap_b.end();iter_b++){//内层循环的迭代器定义需要在for内
                if(iter_a->second==iter_b->second)  {cow++;iter_b->second=-1;break;}//将值赋为-1，防止重复
            }
        }
        string bulls=to_string(bull),cows=to_string(cow);//将数字转化为字符串
        
        return bulls+'A'+cows+'B';
    }
};
