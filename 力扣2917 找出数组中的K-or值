/*
给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。
nums 中的 K-or 是一个满足以下条件的非负整数：
只有在 nums 中，至少存在 k 个元素的第 i 位值为 1 ，那么 K-or 中的第 i 位的值才是 1 。
返回 nums 的 K-or 值。
注意 ：对于整数 x ，如果 (2i AND x) == 2i ，则 x 中的第 i 位值为 1 ，其中 AND 为按位与运算符。
*/

// 大佬写法
class Solution {
public:
    int findKOr(vector<int>& a, int k) {
        int n = a.size();
        int res = 0;
        for (int i = 0; i <= 31; ++i) { //最大为 2 ^ 31 - 1，即二进制右起向左最多31位
            int cnt = 0;
            for (auto x: a) cnt += (x >> i & 1); //(x>>i&1) 此操作即为求x的第i位的值
            if (cnt >= k) res += (1 << i); //(1<<i)即为2的i次方
        }
        return res;
    }
};




class Solution {
public:
    int findKOr(vector<int>& nums, int k) {
       int res=0;
        int m=0;
        for(int i = 0;i<31;i++){ //最大为 2 ^ 31 - 1，即二进制右起向左最多31位
             int cnt = 0;
             int p = pow(2,i);
             for(int n:nums){
                if((p&n)==p)    cnt++;//(p&n)==p  操作即为求n的第i位的值 (2^i)&n=(2^i)
             }
             if(cnt>=k)  res+=pow(2,i);
        }
        return res;
    }
};
