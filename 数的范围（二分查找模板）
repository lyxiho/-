#include<bits/stdc++.h>
using namespace std;
/*
给定一个按照升序排列的长度为 n m 的整数数组，以及 q  个查询。
对于每个查询，返回一个元素 k kk 的起始位置和终止位置（位置从 0 00 开始计数）。
如果数组中不存在该元素，则返回 -1 -1。
输入格式
第一行包含整数 n m 和 q ，表示数组长度和询问个数。
第二行包含 n 个整数（均在 1 ∼ 10000 1∼100001∼10000 范围内），表示完整数组。
接下来 q qq 行，每行包含一个整数 k kk，表示一个询问元素。
输出格式
共 q qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。
如果数组中不存在该元素，则返回 -1 -1。
*/
const int N = 100010;
int n,m;//n表示数组长度，m表示询问个数
int arr[N];
int main(){
    scanf("%d%d",&n,&m);
    for(int i = 0;i < n;i++)    scanf("%d",&arr[i]);

    while(m--){
        int x;
        scanf("%d",&x); //x为要查询的数
        int l=0,r=n-1;

        while(l<r){
            int mid = l+r>>1;
            if(arr[mid]>=x) r = mid;//注意，当此处为r=mid时，上述求mid值时，只需要l+r即可
            else    l = mid+1;
        }
        // 先查询最左边的数
        if(arr[l]!=x) cout<<"-1 -1"<<endl;
        //当左边查询满足时，再进行右边的查询
        else{
            cout<<l<<" ";

            int l=0,r=n-1;
            while(l<r){
                int mid = l+r+1 >>1;
                if(arr[mid]<=x) l=mid;//注意，当此处为l=mid时，上述求mid值时，必须使用l+r+1 向上取整
                else r = mid-1;
            }
            cout<<l<<endl;
        }
    }
    return 0;
}

输入
6 3
1 2 2 3 3 4
3
4
5
输出
3 4
5 5 
-1 -1

