维护一个字符串集合，支持两种操作：
I x 向集合中插入一个字符串 x；
Q x 询问一个字符串在集合中出现了多少次。
共有 N 个操作，输入的字符串总长度不超过 10的5次方，字符串仅包含小写英文字母。
输入格式
第一行包含整数 N，表示操作数。
接下来 N 行，每行包含一个操作指令，指令为 I x 或 Q x 中的一种。
输出格式
对于每个询问指令 Q x，都要输出一个整数作为结果，表示 x 在集合中出现的次数。
每个结果占一行。
数据范围
1≤N≤2∗10的4次方
输入样例：
5
I abc
Q abc
Q ab
I ab
Q ab
输出样例：
1
0
1

#include<iostream>
using namespace std;
 
const int N = 100010;
 
char str[N];
int son[N][26], cnt[N], idx;
//son表示编号为N的节点的子节点们的编号
//cnt表示以编号为N的节点结尾的字符串在集合中出现的个数
//（注意以编号为N的节点结尾的字符串的遍历路径唯一）
//idx表示当前正在操作的节点编号
 
void insert(char str[])//也可传 char *str
{
    int p = 0;//0既为头结点，又为空节点（类似线索二叉树）
    
    for (int i = 0; str[i]; i ++ )
    {
        int u = str[i] - 'a';//获取字符映射后的编号0~25
        if (!son[p][u]) son[p][u] = ++ idx;//表示p下面连接了一个u（映射后）的子节点，编号为idx
        p = son[p][u];//向下移动，重新将子节点作为根节点
    }
    
    cnt[p] ++ ;//以编号p为尾节点的字符串只有一个
}
 
int query(char str[])
{
    int p = 0;
    
    for (int i = 0; str[i]; i ++ )
    {
        int u = str[i] - 'a';
        if (!son[p][u]) return 0;//没找到该字符串，返回0
        p = son[p][u];
    }
    //循环结束后，说明存在以编号p为尾节点的字符串
    return cnt[p];
}
 
int main()
{
    int n;
    scanf("%d", &n);
    
    while (n -- )
    {
        char op[2];
        scanf("%s%s", op, str);//数组名本身也是表示首地址的指针，不用加取址符&
        //但是需要注意，该题的输入中操作和字符串之间还有一个空格,所以op其实是字符串
        if (op[0] == 'I') insert(str);//也可以if(*op == 'I')
        else printf("%d\n", query(str));
    }
    
    return 0;
}
