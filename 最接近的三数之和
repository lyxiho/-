给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。
返回这三个数的和。
假定每组输入只存在恰好一个解。

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        map<int, int> map1;
        sort(nums.begin(), nums.end());
        
        int closestSum = INT_MAX;
        int minDiff = INT_MAX;

        for(int i = 0; i < n - 2; i++){
            int l = i + 1, r = n - 1;
            while(l < r){
                int sum = nums[i] + nums[l] + nums[r];
                int diff = abs(sum - target);

                if(diff < minDiff){
                    minDiff = diff;
                    closestSum = sum;
                }

                if(sum < target){
                    l++;
                }else if(sum > target){
                    r--;
                }else{
                    return sum;
                }
            }
        }
        
        return closestSum;
    }
};

//最初写法
//我的想法是用map的K,V分别存储三数之和，以及与target的差值，通过自定义函数比较差值绝对值的最小值
//这种想法能通过大部分测试样例，但有一部分不能通过，目前认为是向map中插入数据时遇到相同的key时，会覆盖之前的值
class Solution {
public:
    static bool cmp_value(const pair<int, int> left,const pair<int,int> right){
	    return abs(left.first) < abs(right.first);
    }
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        map <int,int> map1;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-2;i++){
            //2,3,8,9,10 
            int tar=target-nums[i];//tar =13
            int l = i+1,r=n-1;//l=1,r=4
            int sum = 0;
            while(l<r){
                sum = nums[l]+nums[r];//sum=18 
                if(sum<tar){
                    l++;//l=2
                }else if(sum>tar){
                    r--;//r=7
                }else{
                    break;
                }
            }//(17,25) 
            map1.insert(make_pair(target-sum-nums[i],sum+nums[i]));//make_pair (a,b)  将a,b作为K,V插入到Map中
        }
        auto res = min_element(map1.begin(),map1.end(),cmp_value);
        return res->second;
    }
};
